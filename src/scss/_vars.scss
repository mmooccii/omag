@use "sass:math";
$font-base-size: 10px;
$design_pc_width: 1366;
$design_sp_width: 375;

$break-medium: $design_pc_width * 1px - 1;
$break-small: 767px;
$break-xsmall: 321px;

// media query
@function translate-media-condition($c) {
  $condMap: (
    "screen": "only screen",
    "print": "only print",
    "medium":
      "(max-width: #{$break-medium}) and (min-width: #{$break-small+1px})",
    "small": "(max-width: #{$break-small})",
    "xsamll": "(max-width: #{$break-xsmall})",
    "pc": "(min-width: #{$break-small+1px})",
  );
  @return map-get($condMap, $c);
}

// The mdia mixin
@mixin media($args...) {
  $query: "";
  @each $arg in $args {
    $op: "";
    @if ($query != "") {
      $op: " and ";
    }
    $query: $query + $op + translate-media-condition($arg);
  }
  @media #{$query} {
    @content;
  }
}

// function
@function size-relative($size: 10px, $base: "pc", $type: "font") {
  @if type-of($size) == "number" {
    $units: (
      "font": 1rem,
      "display": 100vw,
    );
    @if $type == "font" {
      @return math.div($size + 0px, $font-base-size) * map-get($units, $type);
    } @else {
      $base-display: (
        "pc": $design_pc_width + 0px,
        "sp": $design_sp_width + 0px,
      );
      @return math.div($size + 0px, map-get($base-display, $base)) *
        map-get($units, $type);
    }
  } @else {
    @debug $size;
  }
}

@mixin font-size-rem($font-size: 14px) {
  font-size: size-relative($font-size, "pc");
}

@mixin font-size-rem-sp($font-size: 18px) {
  font-size: size-relative($font-size, "sp");
}

@mixin font-size-vw($font-size: 14) {
  font-size: size-relative($font-size, "pc", "display");
}

@mixin font-size-vw-sp($font-size: 14) {
  font-size: size-relative($font-size, "sp", "display");
}

/* fonts */
$sans: "Noto Sans JP", "ヒラギノ角ゴ Pro", "Hiragino Kaku Gothic Pro",
  "游ゴシック", "YuGothic", "メイリオ", "Meiryo", sans-serif;
$sans-ie: "Century Gothic", "futura-pt", "Noto Sans JP", "ヒラギノ角ゴ Pro",
  "Hiragino Kaku Gothic Pro", "游ゴシック", "YuGothic", "メイリオ", "Meiryo",
  sans-serif;
$serif: "Noto Serif JP", "游明朝", YuMincho, "ヒラギノ明朝 ProN W3",
  "Hiragino Mincho ProN", "HG明朝E", "ＭＳ Ｐ明朝", "ＭＳ 明朝", serif;
$helvetica: "Helvetica Neue", Helvetica, "Open Sans", Arial, "Lucida Grande",
  sans-serif;
$futura: "futura-pt", sans-serif;
$times: TimesNewRoman, "Times New Roman", Times, Baskerville, Georgia, serif;

@mixin bgimageInit() {
  display: block;
  background-color: transparent;
  background-repeat: no-repeat;
}

@mixin moving-arrow($url, $width: 10, $height: 12, $right: false) {
  .moving-arrow {
    display: block;
    $arrow-width: $width;
    $arrow-height: $height;
    @if ($right == true) {
      $arrow-width: $width * 2;
    } @else {
      $arrow-height: $height * 2;
    }

    width: $arrow-width;
    height: $arrow-height;
    & > span {
      display: block;
      width: 100%;
      height: 100%;
      position: relative;
      &::before,
      &::after {
        content: "";
        display: block;
        position: absolute;
        width: $width;
        height: $height;
        background-image: url($url);
        @if ($right == true) {
          background-size: auto 100%;
        } @else {
          background-size: 100% auto;
        }
        background-repeat: no-repeat;
        background-color: transparent;
        @if ($right == true) {
          top: 50%;
          left: 70%;
        } @else {
          top: 70%;
          left: 50%;
        }
        transform: translate(-50%, -50%);
      }
      @if ($right == true) {
        &::before {
          animation: arrow-right-move 2s ease-in-out infinite;
        }
        &::after {
          animation: arrow-right-move 2s 1s ease-in-out infinite;
        }
      } @else {
        &::before {
          animation: arrow-down-move 2s ease-in-out infinite;
        }
        &::after {
          animation: arrow-down-move 2s 1s ease-in-out infinite;
        }
      }
    }
  }
}
